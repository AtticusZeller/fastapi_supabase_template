"""Script utilitaire pour v√©rifier la connexion √† Supabase et les pr√©requis pour les tests.
Ex√©cutez-le avant les tests pour diagnostiquer les probl√®mes de connexion.
"""
import os
import sys
import httpx
from dotenv import load_dotenv

def main():
    # Charger les variables d'environnement
    env_file = ".env.test"
    print(f"üìã Recherche du fichier {env_file}...")
    if not os.path.exists(env_file):
        print(f"‚ùå Fichier {env_file} manquant")
        env_file = "../.env.test"
        if not os.path.exists(env_file):
            print(f"‚ùå Fichier {env_file} √©galement manquant")
            print("üîç Utilisation des variables d'environnement sans fichier .env")
        else:
            print(f"‚úÖ Fichier {env_file} trouv√©")
            load_dotenv(env_file)
    else:
        print(f"‚úÖ Fichier {env_file} trouv√©")
        load_dotenv(env_file)
    
    # V√©rifier les variables requises
    required_vars = [
        "PROJECT_NAME",
        "SUPABASE_URL",
        "SUPABASE_KEY",
        "SUPABASE_SERVICE_KEY",
        "POSTGRES_SERVER",
        "POSTGRES_USER",
        "FIRST_SUPERUSER",
        "FIRST_SUPERUSER_PASSWORD"
    ]
    
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    if missing_vars:
        print(f"‚ùå Variables d'environnement manquantes: {', '.join(missing_vars)}")
        sys.exit(1)
    
    print("‚úÖ Toutes les variables d'environnement requises sont pr√©sentes")
    
    # Tester la connexion √† Supabase
    url = os.getenv('SUPABASE_URL')
    key = os.getenv('SUPABASE_KEY')
    service_key = os.getenv('SUPABASE_SERVICE_KEY')
    
    print(f"üîç Test de connexion √† Supabase: {url}")
    
    # Test avec la cl√© anon
    try:
        headers = {'apikey': key, 'Authorization': f'Bearer {key}'}
        response = httpx.get(f'{url}/rest/v1/?apikey={key}', headers=headers, timeout=10)
        if response.status_code in (200, 204):
            print(f"‚úÖ Connexion r√©ussie avec la cl√© anon (status: {response.status_code})")
        else:
            print(f"‚ùå √âchec de connexion avec la cl√© anon (status: {response.status_code})")
            print(f"R√©ponse: {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la connexion avec la cl√© anon: {e}")
    
    # Test avec la cl√© service
    try:
        headers = {'apikey': service_key, 'Authorization': f'Bearer {service_key}'}
        response = httpx.get(f'{url}/rest/v1/?apikey={service_key}', headers=headers, timeout=10)
        if response.status_code in (200, 204):
            print(f"‚úÖ Connexion r√©ussie avec la cl√© service (status: {response.status_code})")
        else:
            print(f"‚ùå √âchec de connexion avec la cl√© service (status: {response.status_code})")
            print(f"R√©ponse: {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la connexion avec la cl√© service: {e}")
    
    # V√©rifier l'existence du bucket de stockage
    try:
        headers = {'apikey': service_key, 'Authorization': f'Bearer {service_key}'}
        response = httpx.get(f'{url}/storage/v1/bucket/profile-pictures', headers=headers, timeout=10)
        if response.status_code == 200:
            print("‚úÖ Bucket 'profile-pictures' trouv√©")
        elif response.status_code == 404:
            print("‚ùå Bucket 'profile-pictures' manquant")
            
            # Essayer de cr√©er le bucket
            try:
                create_response = httpx.post(
                    f'{url}/storage/v1/bucket', 
                    headers=headers,
                    json={'name': 'profile-pictures', 'public': True, 'file_size_limit': 5242880},
                    timeout=10
                )
                if create_response.status_code in (200, 201):
                    print("‚úÖ Bucket 'profile-pictures' cr√©√© avec succ√®s")
                else:
                    print(f"‚ùå √âchec de cr√©ation du bucket (status: {create_response.status_code})")
                    print(f"R√©ponse: {create_response.text}")
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation du bucket: {e}")
        else:
            print(f"‚ùå Erreur inattendue lors de la v√©rification du bucket (status: {response.status_code})")
            print(f"R√©ponse: {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification du bucket: {e}")

if __name__ == "__main__":
    main()