"""policies

Revision ID: 892786d091fd
Revises: 06ff57547050
Create Date: 2025-03-07 15:51:28.785731

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '892786d091fd'
down_revision: Union[str, None] = '06ff57547050'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
    
    # Recherche automatique des tables créées dans cette migration
    tables_created = []
    
    # Parcourir les opérations Alembic pour identifier les CreateTable
    for line in """# ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###""".split('\n'):
        if 'op.create_table(' in line:
            # Extraction du nom de table entre guillemets après create_table
            import re
            match = re.search(r'op\.create_table\([\'"]([^\'"]+)[\'"]', line)
            if match:
                table_name = match.group(1)
                if table_name != 'alembic_version':
                    tables_created.append(table_name)
    
    # Appliquer RLS aux tables nouvellement créées
    for table in tables_created:
        # Activer RLS
        op.execute(f"ALTER TABLE public.{table} ENABLE ROW LEVEL SECURITY;")
        
        # Créer les politiques de base
        op.execute(f"""
            CREATE POLICY "{table}_auth_select" ON public.{table}
            FOR SELECT USING (
                auth.uid() = owner_id OR
                auth.role() = 'service_role'
            );
        """)
        
        op.execute(f"""
            CREATE POLICY "{table}_auth_insert" ON public.{table}
            FOR INSERT WITH CHECK (
                auth.uid() = owner_id OR
                auth.role() = 'service_role'
            );
        """)
        
        op.execute(f"""
            CREATE POLICY "{table}_auth_update" ON public.{table}
            FOR UPDATE USING (
                auth.uid() = owner_id OR
                auth.role() = 'service_role'
            ) WITH CHECK (
                auth.uid() = owner_id OR
                auth.role() = 'service_role'
            );
        """)
        
        op.execute(f"""
            CREATE POLICY "{table}_auth_delete" ON public.{table}
            FOR DELETE USING (
                auth.uid() = owner_id OR
                auth.role() = 'service_role'
            );
        """)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
    
    # Recherche des tables supprimées lors du downgrade
    tables_dropped = []
    
    # Parcourir les opérations de downgrade pour identifier les DropTable
    for line in """# ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###""".split('\n'):
        if 'op.drop_table(' in line:
            import re
            match = re.search(r'op\.drop_table\([\'"]([^\'"]+)[\'"]', line)
            if match:
                table_name = match.group(1)
                if table_name != 'alembic_version':
                    tables_dropped.append(table_name)
    
    # Pour chaque table qui sera supprimée, supprimer d'abord les politiques RLS
    for table in tables_dropped:
        # Supprimer les politiques
        op.execute(f'DROP POLICY IF EXISTS "{table}_auth_select" ON public.{table};')
        op.execute(f'DROP POLICY IF EXISTS "{table}_auth_insert" ON public.{table};')
        op.execute(f'DROP POLICY IF EXISTS "{table}_auth_update" ON public.{table};')
        op.execute(f'DROP POLICY IF EXISTS "{table}_auth_delete" ON public.{table};')
        
        # Désactiver RLS
        op.execute(f'ALTER TABLE public.{table} DISABLE ROW LEVEL SECURITY;')