"""profile_bucket

Revision ID: 18e5c6bd708c
Revises: 
Create Date: 2025-03-07 18:07:19.173054

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '18e5c6bd708c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('item',
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('profiles',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('picture_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.execute('ALTER TABLE item ENABLE ROW LEVEL SECURITY;')
    op.execute('\n                    CREATE POLICY "item_select" ON item\n                    FOR SELECT\n                \n    USING (\n                auth.uid() = owner_id OR\n                auth.role() = \'service_role\'\n            );')
    op.execute('\n                    CREATE POLICY "item_insert" ON item\n                    FOR INSERT\n                \n    WITH CHECK (\n                auth.uid() = owner_id OR\n                auth.role() = \'service_role\'\n            );')
    op.execute('\n                    CREATE POLICY "item_update" ON item\n                    FOR UPDATE\n                \n    USING (\n                auth.uid() = owner_id OR\n                auth.role() = \'service_role\'\n            )\n    WITH CHECK (\n                auth.uid() = owner_id OR\n                auth.role() = \'service_role\'\n            );')
    op.execute('\n                    CREATE POLICY "item_delete" ON item\n                    FOR DELETE\n                \n    USING (\n                auth.uid() = owner_id OR\n                auth.role() = \'service_role\'\n            );')
    op.execute('ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;')
    op.execute('\n                    CREATE POLICY "profiles_select" ON profiles\n                    FOR SELECT\n                \n    USING (auth.uid() = user_id);')
    op.execute('\n                    CREATE POLICY "profiles_insert" ON profiles\n                    FOR INSERT\n                \n    WITH CHECK (auth.uid() = user_id AND auth.role() = \'authenticated\');')
    op.execute('\n                    CREATE POLICY "profiles_update" ON profiles\n                    FOR UPDATE\n                \n    USING (auth.uid() = user_id)\n    WITH CHECK (auth.uid() = user_id);')
    op.execute('\n                    CREATE POLICY "profiles_delete" ON profiles\n                    FOR DELETE\n                \n    USING (auth.uid() = user_id);')
    op.execute("\n                INSERT INTO storage.buckets (id, name, public)\n                VALUES (\n                    'profile-pictures',\n                    'profile-pictures',\n                    true\n                )\n                ON CONFLICT (id) DO UPDATE\n                SET public = EXCLUDED.public;\n            ")
    op.execute('ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;')
    op.execute('\n                CREATE POLICY "profile-pictures_select"\n                ON storage.objects\n                FOR SELECT\n                USING ((\n            auth.role() = \'authenticated\' AND (\n                -- Propriétaire direct du fichier\n                auth.uid() = owner\n                -- OU bucket public\n                OR bucket_id = \'profile-pictures\' AND true\n                \n                -- OU accès via la table liée\n                OR EXISTS (\n                    SELECT 1 FROM profiles t\n                    WHERE \n                        -- Le chemin commence par l\'ID de l\'enregistrement\n                        substring(name from \'profile-pictures/([^/]+)/.*\') = t.id::text\n                        -- Et l\'utilisateur a accès à cet enregistrement\n                        AND (auth.uid() = user_id)\n                )\n                \n            )\n        ))\n                ;\n            ')
    op.execute('\n                CREATE POLICY "profile-pictures_insert"\n                ON storage.objects\n                FOR INSERT\n                \n                WITH CHECK ((\n            auth.role() = \'authenticated\' AND\n            (metadata->>\'size\')::bigint <= 5242880 AND\n            (\n                \'image/jpeg\' = \'*/*\' OR\n                metadata->>\'mimetype\' IN (\'image/jpeg\', \'image/png\', \'image/webp\')\n            )\n            \n            -- Vérifier les droits sur l\'enregistrement lié\n            AND EXISTS (\n                SELECT 1 FROM profiles t\n                WHERE \n                    -- Le chemin doit commencer par un ID valide\n                    substring(name from \'profile-pictures/([^/]+)/.*\') = t.id::text\n                    -- Et l\'utilisateur doit avoir le droit de modifier l\'enregistrement\n                    AND (auth.uid() = user_id)\n            )\n            \n        ));\n            ')
    op.execute('\n                CREATE POLICY "profile-pictures_update"\n                ON storage.objects\n                FOR UPDATE\n                \n                WITH CHECK ((\n            auth.role() = \'authenticated\' AND\n            auth.uid() = owner AND\n            (metadata->>\'size\')::bigint <= 5242880 AND\n            (\n                \'image/jpeg\' = \'*/*\' OR\n                metadata->>\'mimetype\' IN (\'image/jpeg\', \'image/png\', \'image/webp\')\n            )\n            \n            -- Vérifier les droits sur l\'enregistrement lié\n            AND EXISTS (\n                SELECT 1 FROM profiles t\n                WHERE \n                    substring(name from \'profile-pictures/([^/]+)/.*\') = t.id::text\n                    AND (auth.uid() = user_id)\n            )\n            \n        ));\n            ')
    op.execute('\n                CREATE POLICY "profile-pictures_delete"\n                ON storage.objects\n                FOR DELETE\n                USING ((\n            auth.role() = \'authenticated\' AND (\n                auth.uid() = owner\n                \n                -- OU droits via la table liée\n                OR EXISTS (\n                    SELECT 1 FROM profiles t\n                    WHERE \n                        substring(name from \'profile-pictures/([^/]+)/.*\') = t.id::text\n                        AND (auth.uid() = user_id)\n                )\n                \n            )\n        ))\n                ;\n            ')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('DROP POLICY IF EXISTS "profile-pictures_delete" ON storage.objects;')
    op.execute('DROP POLICY IF EXISTS "profile-pictures_update" ON storage.objects;')
    op.execute('DROP POLICY IF EXISTS "profile-pictures_insert" ON storage.objects;')
    op.execute('DROP POLICY IF EXISTS "profile-pictures_select" ON storage.objects;')
    op.execute('ALTER TABLE profiles DISABLE ROW LEVEL SECURITY;')
    op.execute('DROP POLICY IF EXISTS "profiles_delete" ON profiles;')
    op.execute('DROP POLICY IF EXISTS "profiles_update" ON profiles;')
    op.execute('DROP POLICY IF EXISTS "profiles_insert" ON profiles;')
    op.execute('DROP POLICY IF EXISTS "profiles_select" ON profiles;')
    op.execute('ALTER TABLE item DISABLE ROW LEVEL SECURITY;')
    op.execute('DROP POLICY IF EXISTS "item_delete" ON item;')
    op.execute('DROP POLICY IF EXISTS "item_update" ON item;')
    op.execute('DROP POLICY IF EXISTS "item_insert" ON item;')
    op.execute('DROP POLICY IF EXISTS "item_select" ON item;')
    op.drop_table('profiles', schema='public')
    op.drop_table('item')
    op.execute("DELETE FROM storage.buckets WHERE id = 'profile-pictures';")
    # ### end Alembic commands ###