#!/usr/bin/env python
"""
Script pour d√©ployer les variables d'environnement du fichier .env.test
vers les secrets GitHub Actions.

Utilisation :
    python scripts/deploy_env_secrets.py

Pr√©requis :
    - Un token GitHub avec les droits admin:repo_hook, repo
    - Le package python-dotenv
    - Le package PyGithub
    - Un fichier .env.test √† la racine du projet
"""

import base64
import os
from pathlib import Path

import dotenv
from github import Github, GithubException

# Configuration
ENV_FILE = ".env.test"
SECRET_SUFFIX = "_TEST"  # Ajouter ce suffixe aux noms des secrets


def load_env_file(env_file):
    """Charger les variables depuis un fichier .env"""
    env_path = Path(env_file)
    if not env_path.exists():
        raise FileNotFoundError(f"Le fichier {env_file} n'existe pas")

    return dotenv.dotenv_values(env_file)


def get_github_token():
    """Obtenir le token GitHub, soit depuis les variables d'environnement,
    soit en demandant √† l'utilisateur"""
    token = os.environ.get("GITHUB_TOKEN")
    if not token:
        token = input("Entrez votre token GitHub (avec les droits repo): ")
    return token


def get_repo_info():
    """Obtenir les informations du d√©p√¥t, depuis le remote git ou en demandant √† l'utilisateur"""
    try:
        import subprocess

        # Essayer d'obtenir l'URL du remote
        result = subprocess.run(
            ["git", "config", "--get", "remote.origin.url"],
            capture_output=True,
            text=True,
            check=True,
        )
        remote_url = result.stdout.strip()

        # Extraire le propri√©taire et le nom du d√©p√¥t
        if remote_url.endswith(".git"):
            remote_url = remote_url[:-4]

        if "github.com" in remote_url:
            if remote_url.startswith("https://"):
                parts = remote_url.split("/")
                owner = parts[-2]
                repo = parts[-1]
            elif remote_url.startswith("git@"):
                parts = remote_url.split(":")
                owner_repo = parts[1]
                owner, repo = owner_repo.split("/")
            else:
                raise ValueError(f"Format d'URL non reconnu: {remote_url}")

            return owner, repo
    except (subprocess.SubprocessError, ValueError, IndexError):
        pass

    # Fallback : demander √† l'utilisateur
    owner = input("Entrez le nom du propri√©taire du d√©p√¥t GitHub: ")
    repo = input("Entrez le nom du d√©p√¥t GitHub: ")
    return owner, repo


def update_secrets(token, owner, repo_name, env_vars):
    """Mettre √† jour les secrets GitHub avec les variables d'environnement"""
    gh = Github(token)
    try:
        repo = gh.get_user(owner).get_repo(repo_name)
    except GithubException as e:
        print(f"Erreur lors de l'acc√®s au d√©p√¥t: {e}")
        return False

    success = True
    for key, value in env_vars.items():
        if value:  # Ne pas ajouter de secrets vides
            secret_name = f"{key}{SECRET_SUFFIX}"
            try:
                # Cr√©ation ou mise √† jour du secret
                repo.create_secret(secret_name, value)
                print(f"‚úÖ Secret '{secret_name}' ajout√© avec succ√®s")
            except GithubException as e:
                print(f"‚ùå Erreur lors de l'ajout du secret '{secret_name}': {e}")
                success = False

    return success


def main():
    """Fonction principale du script"""
    print("üìù D√©ploiement des secrets GitHub depuis le fichier .env.test")

    # V√©rifier les pr√©requis
    try:
        import github
    except ImportError:
        print("‚ùå Le package PyGithub n'est pas install√©. Installez-le avec:")
        print("   pip install PyGithub")
        return

    try:
        import dotenv
    except ImportError:
        print("‚ùå Le package python-dotenv n'est pas install√©. Installez-le avec:")
        print("   pip install python-dotenv")
        return

    # Charger les variables d'environnement
    try:
        env_vars = load_env_file(ENV_FILE)
        print(f"üìã {len(env_vars)} variables trouv√©es dans {ENV_FILE}")
    except FileNotFoundError as e:
        print(f"‚ùå {e}")
        return

    # Obtenir le token GitHub
    token = get_github_token()
    if not token:
        print("‚ùå Token GitHub non fourni")
        return

    # Obtenir les informations du d√©p√¥t
    owner, repo_name = get_repo_info()
    print(f"üîç D√©p√¥t cible: {owner}/{repo_name}")

    # Confirmation
    print("\nLes secrets suivants seront cr√©√©s ou mis √† jour:")
    for key in env_vars:
        print(f"  - {key}{SECRET_SUFFIX}")

    confirm = input("\nConfirmer? (o/n): ").lower()
    if confirm != "o" and confirm != "y" and confirm != "yes" and confirm != "oui":
        print("‚ùå Op√©ration annul√©e")
        return

    # Mettre √† jour les secrets
    success = update_secrets(token, owner, repo_name, env_vars)

    if success:
        print("\n‚úÖ Tous les secrets ont √©t√© d√©ploy√©s avec succ√®s!")
        print("\n‚ö†Ô∏è  N'oubliez pas d'ajouter CODECOV_TOKEN si vous utilisez Codecov")
    else:
        print("\n‚ö†Ô∏è  Certains secrets n'ont pas pu √™tre d√©ploy√©s. V√©rifiez les erreurs ci-dessus.")


if __name__ == "__main__":
    main()
