name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          pip install pre-commit
          pip install uv
      - name: Run pre-commit hooks
        run: pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    needs: lint
    env:
      PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      POSTGRES_SERVER: ${{ secrets.POSTGRES_SERVER }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      FIRST_SUPERUSER: ${{ secrets.FIRST_SUPERUSER }}
      FIRST_SUPERUSER_PASSWORD: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Create test environment file
        run: |
          # Créer le fichier .env.test avec les secrets GitHub
          # Masquer le fichier pour éviter qu'il ne soit affiché dans les logs
          echo "::add-mask::$(cat .env.test)"
          echo "Test environment file created successfully"
      - name: Install dependencies
        run: |
          pip install uv
          # Créer un environnement virtuel
          uv venv
          source .venv/bin/activate
          # Installer les dépendances
          uv pip install pytest pytest-cov
          cd backend
          uv pip install -e .
      - name: Run tests with coverage
        run: |
          source .venv/bin/activate
          cd backend
          pytest --cov=app --cov-report=xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Check if Dockerfile exists
        id: check_dockerfile
        run: |
          if [ -f "Dockerfile" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Build Docker image
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        run: docker build -t fastapi-supabase-template:${{ github.sha }} .
      - name: Skip Docker build
        if: steps.check_dockerfile.outputs.dockerfile_exists != 'true'
        run: echo "Skipping Docker build because Dockerfile doesn't exist at the root directory"
