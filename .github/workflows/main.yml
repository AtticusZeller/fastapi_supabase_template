name: CI/CD Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '.github/workflows/**'
  workflow_dispatch:

# Global environment variables
env:
  # API Configuration
  PROJECT_NAME: fastapi-supabase
  API_V1_STR: /api/v1
  SECRET_KEY: ${{ secrets.SECRET_KEY }}

  # Environment Settings
  ENVIRONMENT: test
  BACKEND_CORS_ORIGINS: '["http://localhost:3000", "http://localhost:8000"]'

  # Supabase Configuration
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
  SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

  # Database Configuration
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_SERVER: ${{ secrets.POSTGRES_SERVER }}
  POSTGRES_PORT: 5432
  POSTGRES_DB: postgres
  DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_SERVER }}:5432/postgres

  # Auth Configuration
  FIRST_SUPERUSER: ${{ secrets.FIRST_SUPERUSER }}
  FIRST_SUPERUSER_PASSWORD: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}

  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
  SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
  SONAR_HOST_URL: https://sonarcloud.io

  # Test Configuration
  PYTEST_ADDOPTS: "--color=yes"
  PYTHON_VERSION: "3.12"

jobs:
  quality:
    name: Lint and Format
    runs-on: ubuntu-latest
    # Add workflows permission at job level
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install pre-commit and mypy
        run: |
          uv pip install pre-commit mypy types-requests types-python-dateutil types-PyYAML --system
          cd backend
          uv sync --python 3.12 --all-extras --dev

      # Single step handling pre-commit process and auto-fix
      - name: Run pre-commit with auto-fix
        if: github.event_name == 'pull_request'
        run: |
          # Run pre-commit excluding GitHub workflows
          set +e
          pre-commit run --all-files --exclude='.github/workflows/.*'
          pre_commit_status=$?
          set -e

          # If changes were made
          if [ $pre_commit_status -eq 1 ]; then
            echo "Pre-commit fixed formatting issues. Committing changes..."

            # Configure Git
            git config --local user.email "actions@github.com"
            git config --local user.name "GitHub Actions"

            # Commit and push
            git add -A
            git commit -m "[STYLE] Automatic formatting fix (pre-commit)"
            git push

            # Log message
            echo "✅ Formatting fixes made and pushed to branch."
          else
            echo "✅ No formatting issues detected."
          fi

      # For direct pushes (non PR), just check without auto-fix
      - name: Run pre-commit checks only
        if: github.event_name != 'pull_request'
        run: pre-commit run --all-files --exclude='.github/workflows/.*'

  dependabot:
    name: Dependabot Auto-Merge
    runs-on: ubuntu-latest
    needs: quality
    if: ${{ github.actor == 'dependabot[bot]' }}
    permissions:
      contents: write
      pull-requests: write
      issues: write
      repository-projects: write
    steps:
      - name: GitHub Actions Dependencies
        if: ${{ contains(github.event.pull_request.labels.*.name, 'github_actions') }}
        run: gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Approve Patch and Minor Updates
        if: ${{ !contains(github.event.pull_request.title, 'bump') || contains(github.event.pull_request.title, '⬆️') }}
        run: |
          # Only automatically process minor and patch updates
          if echo "$PR_TITLE" | grep -E '(patch|minor)'; then
            echo "Approving PR automatically as it's a patch or minor update"
            gh pr review "$PR_URL" --approve -b "Automatically approved as this is a minor or patch update."

            # Only auto-merge if it's not a major update
            if ! echo "$PR_TITLE" | grep -E '(major)'; then
              echo "Setting auto-merge for PR"
              gh pr merge --auto --squash "$PR_URL"
            fi
          else
            echo "Manual review needed for major update"
            gh pr comment "$PR_URL" -b "This major update requires manual review."
          fi
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          PR_TITLE: ${{github.event.pull_request.title}}

  # SonarCloud analysis for code quality
  sonarcloud:
    name: SonarCloud Analysis
    needs: quality
    runs-on: ubuntu-latest
    # No need to run SonarCloud on PRs from external repositories
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for SonarCloud to see complete history

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # Temporary installation for Supabase verification
      - name: Verify Supabase Connection
        run: |
          python -m pip install python-dotenv httpx
          python backend/scripts/verify_supabase.py

      - name: Build Docker image
        run: docker build --build-arg BUILD_ENV=test -t fastapi-supabase-template:test .

      - name: Run tests with coverage in Docker
        run: |
          docker run \
            -v $(pwd)/.env.test:/app/.env.test \
            -v $(pwd)/backend:/app/backend \
            fastapi-supabase-template:test \
            bash -c "cd /app/backend && python -m pytest -v --cov --junitxml=junit.xml --cov-report=xml -o junit_family=legacy"

      # SonarCloud Analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0

      # Upload coverage reports to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./backend/coverage.xml
          fail_ci_if_error: true
          verbose: true

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  create-sentry-release:
    runs-on: ubuntu-latest
    needs: [sonarcloud]
    if: startsWith(github.ref, 'refs/tags/')
    env:
      ENVIRONMENT: ${{ startsWith(github.ref, 'refs/tags/') && 'production' || github.ref == 'refs/heads/main' && 'staging' || 'development' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history to access commits for changelog

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            VERSION=$(git rev-parse --short HEAD)-staging
          else
            VERSION=$(git rev-parse --short HEAD)-dev
          fi
          echo "release_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version determined: $VERSION"

      - name: Create Sentry Release
        uses: getsentry/action-release@v1
        with:
          auth_token: ${{ secrets.SENTRY_AUTH_TOKEN }}
          org: ${{ secrets.SENTRY_ORG }}
          project: ${{ secrets.SENTRY_PROJECT }}
          environment: ${{ env.ENVIRONMENT }}
          version: ${{ steps.version.outputs.release_version }}
          ignore_missing: true
          ignore_empty: true

  # Deployment (only for version tags)
  release:
    name: Bump Version and Release
    needs: [create-sentry-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --dev

      - name: Generate a changelog
        env:
          ATTICUS_PAT: ${{ secrets.ATTICUS_PAT }}
        run: uv run git-cliff -vv --latest --strip header --github-token "$ATTICUS_PAT" -o CHANGES.md

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: CHANGES.md
          token: ${{ secrets.GITHUB_TOKEN }}
