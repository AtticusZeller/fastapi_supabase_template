name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:  # Pour permettre l'exécution manuelle

jobs:
  quality:
    name: Lint and Format
    runs-on: ubuntu-latest
    # Ajouter la permission workflows au niveau du job
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install pre-commit
        run: uv pip install pre-commit --system

      # Une seule étape qui gère tout le processus de pre-commit et d'auto-correction
      - name: Run pre-commit with auto-fix
        if: github.event_name == 'pull_request'
        run: |
          # Exécuter pre-commit
          set +e
          pre-commit run --all-files
          pre_commit_status=$?
          set -e

          # Si des modifications ont été effectuées
          if [ $pre_commit_status -eq 1 ]; then
            echo "Pre-commit a corrigé des problèmes de formatage. Commit des changements..."

            # Configurer Git
            git config --local user.email "actions@github.com"
            git config --local user.name "GitHub Actions"

            # Commit et push
            git add -A
            git commit -m "[STYLE] Correction automatique du formatage (pre-commit)"
            git push

            # Message pour les logs
            echo "✅ Corrections de formatage effectuées et poussées sur la branche."
          else
            echo "✅ Aucun problème de formatage détecté."
          fi

      # Pour les push directs (non PR), juste vérifier sans auto-correction
      - name: Run pre-commit checks only
        if: github.event_name != 'pull_request'
        run: pre-commit run --all-files

  # Analyse SonarCloud pour la qualité du code
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    # Pas besoin d'exécuter SonarCloud dans les PR qui viennent de l'extérieur
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important pour SonarCloud pour voir l'historique complet

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # Générer le fichier .env.test pour les tests
      - name: Generate .env.test file
        run: |
          cat > .env.test << EOF
          PROJECT_NAME=test-ci
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
          SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}
          POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=postgres
          POSTGRES_PORT=5432
          FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}
          FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}
          EOF
          echo "Created .env.test file with CI credentials"

      # Installation temporaire pour la vérification de Supabase
      - name: Verify Supabase Connection
        run: |
          python -m pip install python-dotenv httpx
          python backend/scripts/verify_supabase.py

      # Installer les dépendances et exécuter les tests avec génération des rapports
      - name: Install dependencies and run tests
        run: |
          cd backend
          uv sync --all-extras --dev
          # Exécuter les tests avec génération du rapport XML pour SonarCloud
          bash scripts/run_ci_tests.sh

      # Analyse SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token in SonarCloud

  # Création de l'image Docker et exécution des tests
  build-and-test:
    name: Build and Test
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Créer le fichier .env.test avant le build
      - name: Generate .env.test file
        run: |
          cat > .env.test << EOF
          PROJECT_NAME=test-ci
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
          SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}
          POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=postgres
          POSTGRES_PORT=5432
          FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}
          FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}
          EOF
          echo "Created .env.test file with CI credentials"

      # Installation temporaire pour la vérification de Supabase
      - name: Verify Supabase Connection
        run: |
          python -m pip install python-dotenv httpx
          python backend/scripts/verify_supabase.py

      - name: Build Docker image
        run: docker build --build-arg BUILD_ENV=test -t fastapi-supabase-template:test .

      - name: Run tests with coverage in Docker
        run: |
          docker run \
            -v $(pwd)/.env.test:/app/.env.test \
            -v $(pwd)/backend:/app/backend \
            fastapi-supabase-template:test \
            bash -c "cd /app/backend && python -m pytest --cov=app --cov-report=xml -v"

          # Copier les résultats de couverture depuis le conteneur
          docker cp $(docker ps -lq):/app/backend/coverage.xml ./backend/coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          fail_ci_if_error: true
          verbose: true

  # Tests multi-plateforme (optionnel, uniquement sur main)
  matrix-test:
    name: Test Python ${{ matrix.python-version }}
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        python-version: ["3.11", "3.13"]  # 3.12 est déjà testé dans le job test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Générer le fichier .env.test
      - name: Generate .env.test file
        run: |
          cat > .env.test << EOF
          PROJECT_NAME=test-ci
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
          SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}
          POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=postgres
          POSTGRES_PORT=5432
          FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}
          FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}
          EOF
          echo "Created .env.test file with CI credentials"

      # Créer une image Docker modifiée pour la version Python spécifique
      - name: Build Docker image for Python ${{ matrix.python-version }}
        run: |
          # Créer un Dockerfile temporaire qui utilise la version Python spécifique
          echo "FROM python:${{ matrix.python-version }}-slim" > Dockerfile.test
          cat Dockerfile | grep -v "^FROM" >> Dockerfile.test
          docker build --build-arg BUILD_ENV=test -f Dockerfile.test -t fastapi-test:${{ matrix.python-version }} .

      - name: Run tests in Docker
        run: |
          docker run \
            -v $(pwd)/.env.test:/app/.env.test \
            -v $(pwd)/backend:/app/backend \
            fastapi-test:${{ matrix.python-version }} \
            bash -c "cd /app/backend && python -m pytest -v"

  # Déploiement (uniquement pour les tags de version)
  release:
    name: Bump Version and Release
    needs: [build-and-test, matrix-test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --dev

      - name: Generate a changelog
        env:
          ATTICUS_PAT: ${{ secrets.ATTICUS_PAT }}
        run: uv run git-cliff -vv --latest --strip header --github-token "$ATTICUS_PAT" -o CHANGES.md

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: CHANGES.md
          token: ${{ secrets.GITHUB_TOKEN }}
