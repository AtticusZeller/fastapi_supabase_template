name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install pre-commit
        run: uv pip install pre-commit --system

      - name: Run pre-commit checks
        run: pre-commit run --all-files

  # Création de l'image Docker et exécution des tests
  build-and-test:
    name: Build and Test
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create .env.test file
        run: |
          echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" > .env.test
          # Autres variables d'environnement

      - name: Build Docker image
        run: docker build -t fastapi-supabase-template:test .

      - name: Run tests with coverage in Docker
        run: |
          docker run --env-file .env.test -v $(pwd)/backend:/app/backend fastapi-supabase-template:test bash -c "cd /app/backend && python -m pytest --cov=app --cov-report=xml"
          # Copier les résultats de couverture depuis le conteneur
          docker cp $(docker ps -lq):/app/backend/coverage.xml ./backend/coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          fail_ci_if_error: true
          verbose: true

  # Tests multi-plateforme (optionnel, uniquement sur main)
  matrix-test:
    name: Test Python ${{ matrix.python-version }}
    needs: test
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        python-version: ["3.11", "3.13"]  # 3.12 est déjà testé dans le job test
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      POSTGRES_SERVER: ${{ secrets.POSTGRES_SERVER }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      FIRST_SUPERUSER: ${{ secrets.FIRST_SUPERUSER }}
      FIRST_SUPERUSER_PASSWORD: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Create .env.test file
        run: |
          echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" > .env.test
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env.test
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env.test
          echo "SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}" >> .env.test
          echo "POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}" >> .env.test
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.test
          echo "FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}" >> .env.test
          echo "FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}" >> .env.test

      # Créer une image Docker modifiée pour la version Python spécifique
      - name: Build Docker image for Python ${{ matrix.python-version }}
        run: |
          # Créer un Dockerfile temporaire qui utilise la version Python spécifique
          echo "FROM python:${{ matrix.python-version }}-slim" > Dockerfile.test
          cat Dockerfile | grep -v "^FROM" >> Dockerfile.test
          docker build -f Dockerfile.test -t fastapi-test:${{ matrix.python-version }} .

      - name: Run tests in Docker
        run: |
          docker run --env-file .env.test -v $(pwd)/backend:/app/backend fastapi-test:${{ matrix.python-version }} bash -c "cd /app/backend && python -m pytest"

  # Déploiement (uniquement pour les tags de version)
  release:
    name: Bump Version and Release
    needs: [test, matrix-test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --dev

      - name: Generate a changelog
        env:
          ATTICUS_PAT: ${{ secrets.ATTICUS_PAT }}
        run: uv run git-cliff -vv --latest --strip header --github-token "$ATTICUS_PAT" -o CHANGES.md

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: CHANGES.md
          token: ${{ secrets.GITHUB_TOKEN }}
