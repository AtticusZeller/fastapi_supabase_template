name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Vérification de la qualité du code
  quality:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          uv pip install pre-commit --system
          uv pip install -e . --system

      - name: Run pre-commit checks
        run: pre-commit run --all-files

  # Tests et couverture de code
  test:
    name: Test Coverage
    needs: quality
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      POSTGRES_SERVER: ${{ secrets.POSTGRES_SERVER }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      FIRST_SUPERUSER: ${{ secrets.FIRST_SUPERUSER }}
      FIRST_SUPERUSER_PASSWORD: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install brew
        run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

      - name: Create .env.test file
        run: |
          echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" > .env.test
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env.test
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env.test
          echo "SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}" >> .env.test
          echo "POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}" >> .env.test
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.test
          echo "FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}" >> .env.test
          echo "FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}" >> .env.test

      - name: Install Supabase
        run: |
          echo >> /home/runner/.bashrc
          echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> /home/runner/.bashrc
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          HOMEBREW_NO_INSTALL_CLEANUP=1
          brew install supabase/tap/supabase
          bash scripts/update-env.sh
          cd backend
          uv sync --all-extras --dev
          uv run bash scripts/pre-start.sh
          uv run bash scripts/tests-start.sh

      - name: Run tests with coverage
        run: |
          cd backend
          uv pip install pytest pytest-cov
          uv run python -m pytest --cov=app --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          fail_ci_if_error: true
          verbose: true

  # Tests multi-plateforme (optionnel, uniquement sur main)
  matrix-test:
    name: Test Python ${{ matrix.python-version }}
    needs: test
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11", "3.13"]  # 3.12 est déjà testé dans le job test
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install brew
        run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

      # Similaire au job test mais sans upload de couverture
      # [...]

  # Construction de l'image Docker
  build:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check if Dockerfile exists
        id: check_dockerfile
        run: |
          if [ -f "Dockerfile" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        run: docker build -t fastapi-supabase-template:${{ github.sha }} .

  # Déploiement (uniquement pour les tags de version)
  release:
    name: Bump Version and Release
    needs: [test, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --dev

      - name: Generate a changelog
        env:
          ATTICUS_PAT: ${{ secrets.ATTICUS_PAT }}
        run: uv run git-cliff -vv --latest --strip header --github-token "$ATTICUS_PAT" -o CHANGES.md

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: CHANGES.md
          token: ${{ secrets.GITHUB_TOKEN }}
